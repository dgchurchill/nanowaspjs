/*! z80.jscpp: z80 supplementary functions
   Copyright (c) 1999-2008 Philip Kendall, Matthew Westcott

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
	Contact details: <matthew@west.co.tt>
	Matthew Westcott, 14 Daisy Hill Drive, Adlington, Chorley, Lancs PR6 9NE UNITED KINGDOM
*/

#include "z80_macros.jscpp"

/* Whether a half carry occured or not can be determined by looking at
   the 3rd bit of the two arguments and the result; these are hashed
   into this table in the form r12, where r is the 3rd bit of the
   result, 1 is the 3rd bit of the 1st argument and 2 is the
   third bit of the 2nd argument; the tables differ for add and subtract
   operations */
var halfcarry_add_table = [ 0, FLAG_H, FLAG_H, FLAG_H, 0, 0, 0, FLAG_H ];
var halfcarry_sub_table = [ 0, 0, FLAG_H, 0, FLAG_H, 0, FLAG_H, FLAG_H ];

/* Similarly, overflow can be determined by looking at the 7th bits; again
   the hash into this table is r12 */
var overflow_add_table = [ 0, 0, 0, FLAG_V, FLAG_V, 0, 0, 0 ];
var overflow_sub_table = [ 0, FLAG_V, 0, 0, 0, 0, FLAG_V, 0 ];

/* Some more tables; initialised in z80_init_tables() */

var sz53_table = []; /* The S, Z, 5 and 3 bits of the index */
var parity_table = []; /* The parity of the lookup value */
var sz53p_table = []; /* OR the above two tables together */

/* This is what everything acts on! */
export interface Z80 {
	a, f, b, c, d, e, h, l: number;
	a_, f_, b_, c_, d_, e_, h_, l_: number;
	ixh, ixl, iyh, iyl: number;
  i: number;

  /* The low seven bits of the R register. 16 bits long
		 so it can also act as an RZX instruction counter */
  r: number; 

  /* The high bit of the R register */
  r7: number;

	sp, pc: number;
  iff1, iff2, im: number;
  halted: boolean;

  tstates: number;

  readbyte_internal: (address: number) => number;
  writebyte_internal: (address: number, value: number) => void;
  readport: (address: number) => number;
  writeport: (address: number, value: number) => void;
}

/* Initalise the tables used to set flags */
(function () {
  var i,j,k;
  var parity;

  for(i=0;i<0x100;i++) {
    sz53_table[i]= i & ( FLAG_3 | FLAG_5 | FLAG_S );
    j=i; parity=0;
    for(k=0;k<8;k++) { parity ^= j & 1; j >>=1; }
    parity_table[i]= ( parity ? 0 : FLAG_P );
    sz53p_table[i] = sz53_table[i] | parity_table[i];
  }

  sz53_table[0]  |= FLAG_Z;
  sz53p_table[0] |= FLAG_Z;

})();

export function z80_init(
    readbyte_internal: (address: number) => number,
    writebyte_internal: (address: number, value: number) => void,
    readport: (address: number) => number,
    writeport: (address: number, value: number) => void): Z80 {

    let z80 = {} as Z80;
    z80_reset(z80);
    z80_clear_breakpoints(z80);
    z80.readbyte_internal = readbyte_internal;
    z80.writebyte_internal = writebyte_internal;
    z80.readport = readport;
    z80.writeport = writeport;
    return z80;
}

/* Reset the z80 */
export function z80_reset(z80) {
  A =F =B =C =D =E =H =L =0;
  A_ =F_ =B_ =C_ =D_ =E_=H_ =L_=0;
  IXH=IXL=IYH=IYL=0;
  I=R=R7=0;
  SP=PC=0;
  IFF1=IFF2=IM=0;
  z80.halted=0;
  z80_clear_breakpoints(z80);
}

/* Process a z80 maskable interrupt */
function z80_interrupt(z80) {
  /* Process if IFF1 set && (if a Timex machine, SCLD INTDISABLE is clear) */
  if( IFF1 ) {
    
    if( z80.halted ) { PC++; PC &= 0xffff; z80.halted = false; }
    
    IFF1=IFF2=0;

    SP = (SP - 1) & 0xffff;
    writebyte( SP, PCHR );
    SP = (SP - 1) & 0xffff;
    writebyte( SP, PCLR );

    R = (R+1) & 0x7f; /* rzx_instructions_offset--; */

    switch(IM) {
      case 0: PC = 0x0038; z80.tstates+=12; break;
      case 1: PC = 0x0038; z80.tstates+=13; break;
      case 2: 
	{
	  var inttemp=(0x100*I)+0xff;
	  var pcl = readbyte(inttemp++); inttemp &= 0xfff; var pch = readbyte(inttemp);
	  PC = pcl | (pch << 8);
	  z80.tstates+=19;
	  break;
	}
      default:
          throw new Error("Unknown interrupt mode " + IM);
    }
  }
}

/* Process a z80 non-maskable interrupt */
function z80_nmi(z80) {
  /* FIXME: what happens if the z80 is HALTed? */

  IFF1 = 0;

  SP = (SP - 1) & 0xffff;
  writebyte( SP, PCHR );
  SP = (SP - 1) & 0xffff;
  writebyte( SP, PCLR );

  /* FIXME: how is R affected? */

  /* FIXME: how does contention apply here? */
  z80.tstates += 11; PC = 0x0066;
}

#include "z80_ops.jscpp"
